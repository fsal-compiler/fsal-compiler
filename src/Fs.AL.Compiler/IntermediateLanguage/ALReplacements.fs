namespace Fs.AL.Compiler.IntermediateLanguage

open System.Collections.Generic
open System.Reflection
open System.Windows.Input
open FSharp.Compiler.Symbols
open Fs.AL.Compiler.IntermediateLanguage
open Fs.AL.Compiler.IntermediateLanguage.ALLanguage

[<RequireQualifiedAccess>]
type LetExprKind =
    | Decision
    | Declaration
    | TypeProvider of func:FSharpMemberOrFunctionOrValue * targetType:FSharp.Compiler.Symbols.FSharpType * args:FSharpExpr list
    | Constructor
    | NewRecord
    /// override both variable declarations and assignment
    | Override
    /// <autogenerated from let> := ( Current Expression )
    | Normal

[<RequireQualifiedAccess>]
type ALExprContext =
    | NoContext
    | Sequential of chain:FSharpExpr list
    | BindingVar of FSharpMemberOrFunctionOrValue
    | LetBinding of bindVar:FSharpMemberOrFunctionOrValue * kind:LetExprKind // var:FSharpMemberOrFunctionOrValue * bindingExpr:FSharpExpr
    | DecisionTree of decisionExpr:FSharpExpr * targets:ALExpression list
    | Constructor of identifier:string // todo refactor
    static member usingCtx (ctx:ALExprContext) (context:ICollection<ALExprContext>)  fn  =
        context.Add(ctx)
        let result = fn ()
        context.Remove(ctx) |> ignore
        result
        
    // todo refactor 
    static member getCtorCtx (context:ICollection<ALExprContext>)  = 
        context
        |> Seq.choose (fun f ->
            match f with
            | ALExprContext.Constructor identifier -> identifier |> Some     
            | _ -> None
        )
        |> Seq.tryLast
        

    static member getLetBindingCtx (context:ICollection<ALExprContext>) =
        context
        |> Seq.choose (fun f ->
            match f with
            | ALExprContext.LetBinding(memberOrFunctionOrValue, letExprKind) -> (memberOrFunctionOrValue,letExprKind) |> Some     
            | _ -> None
        )
        |> Seq.tryLast
        
        


type ALFunctionReplacementArgs =
    {
        context : ICollection<ALExprContext>
        variableDeclarations : ICollection<ALVariable>
        toAL : (FSharpExpr -> ALExpression)
        objExpr : FSharpExpr option
        funcMember : FSharpMemberOrFunctionOrValue
        argExprs : FSharpExpr list
    }

/// <code>
/// { new IALFunctionReplacement with
///     member this.FunctionName = "System.DateTime.get_Now"
///     member this.Replacement =
///         (fun context -> ALExpression.Identifier "Hello" )
/// }
/// </code>
type IALFunctionReplacement =
    /// F# function full name to replace
    /// e.g. "System.DateTime.get_Now"
    abstract member FunctionName : string
    /// fsToAL -> obj -> mem -> args
    /// return AL Expression
    /// e.g. ALExpression.createInvocation "CurrentDateTime" [] )
    abstract member Replacement : (ALFunctionReplacementArgs -> ALExpression)
  
        


